'use client';

import { useState, useMemo, useEffect } from 'react';
import { StudentSemRecord } from '@/store/api/types/classRecord';
import { useParams } from 'next/navigation';
import { useGetTeachingLoadQuery } from '@/store/api/apiSlice/get/teachingLoadApiSlice';
import { useGetSemQuery, useGetTermQuery } from '@/store/api/apiSlice/get/semApiSlice';
import { useGetSemGradesQuery } from '@/store/api/apiSlice/get/gradesApiSlice';

// Sorting Keys
type SortableKeys = keyof StudentSemRecord;

export default function ClassRecordTable() {
  // State for term filtering
  const [selectedTerm, setSelectedTerm] = useState<number>(1);

  // Dummy data with termId
//   const [students, setStudents] = useState<StudentSemRecord[]>([
//     {
//       studentId: 1,
//       name: 'John Doe',
//       termId: 1,
//       semGrade: {
        
//           quizzes: 85,
//           assignments: 88,
//           exams: 80,
//           attendance: 90
      
//       },
//       status: 'Passed',

//       finalGrade: 86,
//       remarks: 'Good performance'
//     },
//     {
//       studentId: 2,
//       name: 'Jane Smith',
//       termId: 1,
//       semGrade: {
       
//           quizzes: 70,
//           assignments: 72,
//           exams: 65,
//           attendance: 75
     
       
//       },
//       status: 'Failed',
//        finalGrade: 70,
//     remarks: 'Needs improvement'
//     },
//     {
//       studentId: 3,
//       name: 'Alice Johnson',
//       termId: 2,
//        semGrade: {
//           quizzes: 92,
//           assignments: 95,
//           exams: 88,
//           attendance: 98
//         },
       
   
//     status: 'Passed',
//     finalGrade: 92,
//     remarks: 'Excellent'
//     },
//   ]);

  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState<{ key: SortableKeys; direction: 'asc' | 'desc' }>({
    key: 'finalGrade',
    direction: 'desc',
  });

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 40;


  // API call with dynamic termId
  const { id } = useParams();

  const { data: semGrades } = useGetSemGradesQuery({
    teachingLoadDetailId: Number(id),
    termId: selectedTerm,
  });
  const { data: teachingLoadData } = useGetTeachingLoadQuery();
  const { data: termData } = useGetTermQuery();
  const { data: semData } = useGetSemQuery();
  

  // Filtering with term support
  const filteredStudents = useMemo(() => {
    if (!semGrades) return [];

    let filtered = [...semGrades];
    
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (student) =>
          student.name.toLowerCase().includes(term) ||
          student.studentId.toString().includes(term)
      );
    }
    return filtered;
  }, [semGrades, searchTerm, selectedTerm]);

  // Sorting (unchanged)
  const sortedStudents = useMemo(() => {
    return [...filteredStudents].sort((a, b) => {
      const key = sortConfig.key;
      const direction = sortConfig.direction;
      const aValue = a[key];
      const bValue = b[key];

      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
      }
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        return direction === 'asc' ? aValue - bValue : bValue - aValue;
      }
      return 0;
    });
  }, [filteredStudents, sortConfig]);
  

  // Pagination (unchanged)
  const totalPages = Math.ceil(sortedStudents.length / itemsPerPage);
  const paginatedStudents = useMemo(() => {
    const start = (currentPage - 1) * itemsPerPage;
    return sortedStudents.slice(start, start + itemsPerPage);
  }, [sortedStudents, currentPage]);

  const requestSort = (key: SortableKeys) => {
    let direction: 'asc' | 'desc' = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
    setCurrentPage(1);
  };

  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, selectedTerm]);

  const getSortIcon = (key: SortableKeys) => {
    if (sortConfig.key !== key) return null;
    return sortConfig.direction === 'asc' ? (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
      </svg>
    ) : (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
      </svg>
    );
  };


  const teachingLoad = teachingLoadData?.find((load) =>
    load.teachingLoadId.some((subject) => subject.id === Number(id))
  );

  if (!teachingLoad) {
    return <div className="p-4">Teaching Load not found</div>;
  }

  const semDetail = semData?.find((sem) => sem.id === teachingLoad.semId)?.semName;
  const subjectDetail = teachingLoad.teachingLoadId.find((subject) => subject.id === Number(id));

  if (!subjectDetail) {
    return <div className="p-4">Subject Detail not found</div>;
  }

  if (!semGrades) {
    return <div className="p-4">Loading grades...</div>;
  }
  
  if (semGrades.length === 0) {
    return <div className="p-4">No students found for this term.</div>;
  }

  return (
    <div className="p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-2">
          Class Record: {subjectDetail.subjects.subjectName} | {semDetail} | {teachingLoad.academicYear}
        </h2>
        <div className='space-y-2'>
          <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300 flex">
            Section: 
            <span className="ml-7 px-2 bg-primary text-white rounded-md text-s flex">
              {subjectDetail.section}
            </span>
          </h3>
          <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300 flex">
            Schedule:
            <span className="ml-3 px-2 bg-primary text-white rounded-md text-s flex">
              {subjectDetail.schedule}
            </span>
          </h3>
          {/* Term Selector - Added here */}
          <div className="flex gap-2 pt-2">
            {termData?.map((term) => (
                <button
                    key={term.id}
                    onClick={() => setSelectedTerm(term.id)}
                    className={`px-3 py-1 text-sm rounded-md ${
                    selectedTerm === term.id
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                    }`}
                >
                    {term.termType}
                </button>
            ))}
            {/* <button
              onClick={() => setSelectedTerm(1)}
              className={`px-3 py-1 text-sm rounded-md ${
                selectedTerm === 1
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
              }`}
            >
              Term 1
            </button>
            <button
              onClick={() => setSelectedTerm(2)}
              className={`px-3 py-1 text-sm rounded-md ${
                selectedTerm === 2
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
              }`}
            >
              Term 2
            </button> */}
          </div>
        </div>
      </div>
      
      {/* Rest of your UI remains exactly the same */}
      <p className="mb-2 text-gray-500 dark:text-gray-400">Manage and view your class records efficiently</p>
      
      <div className="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        {/* Search input - unchanged */}
        <div className="relative flex-grow max-w-md">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg className="h-5 w-5 text-gray-400 dark:text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
            </svg>
          </div>
          <input
            type="text"
            placeholder="Search by Student Name or ID"
            className="pl-10 pr-3 py-2 w-full border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div>
          <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white rounded-lg transition-colors flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Add Student
          </button>
        </div>
      </div>

      {/* Table - unchanged */}
      <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead className="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th 
                scope="col" 
                className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors flex items-center"
                onClick={() => requestSort('studentId')}
              >
                <span>Student ID</span>
                {getSortIcon('studentId')}
              </th>
              <th 
                scope="col" 
                className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                onClick={() => requestSort('name')}
              >
                <div className="flex items-center">
                  <span>Student Name</span>
                  {getSortIcon('name')}
                </div>
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Quizzes
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Activities
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Exams
              </th>
              <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Attendance
              </th>
              <th 
                scope="col" 
                className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                onClick={() => requestSort('finalGrade')}
              >
                <div className="flex items-center">
                  <span>Final Grade</span>
                  {getSortIcon('finalGrade')}
                </div>
              </th>
              {/* <th 
                scope="col" 
                className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                onClick={() => requestSort('status')}
              >
                <div className="flex items-center">
                  <span>Status</span>
                  {getSortIcon('status')}
                </div>
              </th> */}
              {/* <th scope="col" className="relative px-4 py-3">
                <span className="sr-only">Actions</span>
              </th> */}
            </tr>
          </thead>
          <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
            {paginatedStudents.length > 0 ? (
              paginatedStudents.map((student) => (
                <tr key={student.studentId} className="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                  <td className="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                    {student.studentId}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                    {student.name}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300 text-center">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                      {student.scores.quiz}%
                    </span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300 text-center">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                      {student.scores.activity}%
                    </span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300 text-center">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-200">
                      {student.scores.attendance}%
                    </span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300 text-center">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200">
                      {student.scores.exa}%
                    </span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300 text-center">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">
                      {student.finalGrade}%
                    </span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm text-center">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                      student.remarks === 'Passed' 
                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
                        : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                    }`}>
                      {student.remarks}
                    </span>
                  </td>
                  {/* <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex items-center justify-end space-x-2">
                      <button className="p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors text-gray-400 dark:text-gray-500 hover:text-blue-600 dark:hover:text-blue-400">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                        </svg>
                      </button>
                      <button className="p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors text-gray-400 dark:text-gray-500 hover:text-red-600 dark:hover:text-red-400">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                      </button>
                    </div>
                  </td> */}
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={9} className="px-4 py-8 text-center text-gray-500 dark:text-gray-400">
                  No students found. Try adjusting your search criteria.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination - unchanged */}
      <div className="flex items-center justify-between mt-6">
        <div className="text-sm text-gray-700 dark:text-gray-300">
          Showing <span className="font-medium">{filteredStudents.length > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0}</span> to{' '}
          <span className="font-medium">{Math.min(currentPage * itemsPerPage, filteredStudents.length)}</span> of{' '}
          <span className="font-medium">{filteredStudents.length}</span> students
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
            disabled={currentPage === 1}
            className="p-2 border border-gray-300 dark:border-gray-600 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 bg-white dark:bg-gray-800 transition-colors"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
          </button>
          {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {
            const pageNum = i + 1;
            return (
              <button
                key={pageNum}
                onClick={() => setCurrentPage(pageNum)}
                className={`w-8 h-8 flex items-center justify-center rounded-md ${
                  pageNum === currentPage
                    ? 'bg-blue-600 dark:bg-blue-500 text-white'
                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors'
                }`}
              >
                {pageNum}
              </button>
            );
          })}
          <button
            onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
            disabled={currentPage === totalPages}
            className="p-2 border border-gray-300 dark:border-gray-600 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 bg-white dark:bg-gray-800 transition-colors"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
}